/* *************************************************************************************************
 SQLToken+Keywords.swift
   Â© 2024 YOCKOW.
     Licensed under MIT License.
     See "LICENSE.txt" for more information.
 ************************************************************************************************ */

extension SQLToken {
  public static let a: SQLToken = Keyword(rawValue: "A")
  public static let abort: SQLToken = Keyword(rawValue: "ABORT")
  public static let abs: SQLToken = Keyword(rawValue: "ABS")
  public static let absent: SQLToken = Keyword(rawValue: "ABSENT")
  public static let absolute: SQLToken = Keyword(rawValue: "ABSOLUTE")
  public static let access: SQLToken = Keyword(rawValue: "ACCESS")
  public static let according: SQLToken = Keyword(rawValue: "ACCORDING")
  public static let acos: SQLToken = Keyword(rawValue: "ACOS")
  public static let action: SQLToken = Keyword(rawValue: "ACTION")
  public static let ada: SQLToken = Keyword(rawValue: "ADA")
  public static let add: SQLToken = Keyword(rawValue: "ADD")
  public static let admin: SQLToken = Keyword(rawValue: "ADMIN")
  public static let after: SQLToken = Keyword(rawValue: "AFTER")
  public static let aggregate: SQLToken = Keyword(rawValue: "AGGREGATE")
  public static let all: SQLToken = Keyword(rawValue: "ALL")
  public static let allocate: SQLToken = Keyword(rawValue: "ALLOCATE")
  public static let also: SQLToken = Keyword(rawValue: "ALSO")
  public static let alter: SQLToken = Keyword(rawValue: "ALTER")
  public static let always: SQLToken = Keyword(rawValue: "ALWAYS")
  public static let analyse: SQLToken = Keyword(rawValue: "ANALYSE")
  public static let analyze: SQLToken = Keyword(rawValue: "ANALYZE")
  public static let and: SQLToken = Keyword(rawValue: "AND")
  public static let any: SQLToken = Keyword(rawValue: "ANY")
  public static let anyValue: SQLToken = Keyword(rawValue: "ANY_VALUE")
  public static let are: SQLToken = Keyword(rawValue: "ARE")
  public static let array: SQLToken = Keyword(rawValue: "ARRAY")
  public static let arrayAgg: SQLToken = Keyword(rawValue: "ARRAY_AGG")
  public static let arrayMaxCardinality: SQLToken = Keyword(rawValue: "ARRAY_MAX_CARDINALITY")
  public static let `as`: SQLToken = Keyword(rawValue: "AS")
  public static let asc: SQLToken = Keyword(rawValue: "ASC")
  public static let asensitive: SQLToken = Keyword(rawValue: "ASENSITIVE")
  public static let asin: SQLToken = Keyword(rawValue: "ASIN")
  public static let assertion: SQLToken = Keyword(rawValue: "ASSERTION")
  public static let assignment: SQLToken = Keyword(rawValue: "ASSIGNMENT")
  public static let asymmetric: SQLToken = Keyword(rawValue: "ASYMMETRIC")
  public static let at: SQLToken = Keyword(rawValue: "AT")
  public static let atan: SQLToken = Keyword(rawValue: "ATAN")
  public static let atomic: SQLToken = Keyword(rawValue: "ATOMIC")
  public static let attach: SQLToken = Keyword(rawValue: "ATTACH")
  public static let attribute: SQLToken = Keyword(rawValue: "ATTRIBUTE")
  public static let attributes: SQLToken = Keyword(rawValue: "ATTRIBUTES")
  public static let authorization: SQLToken = Keyword(rawValue: "AUTHORIZATION")
  public static let avg: SQLToken = Keyword(rawValue: "AVG")
  public static let backward: SQLToken = Keyword(rawValue: "BACKWARD")
  public static let base64: SQLToken = Keyword(rawValue: "BASE64")
  public static let before: SQLToken = Keyword(rawValue: "BEFORE")
  public static let begin: SQLToken = Keyword(rawValue: "BEGIN")
  public static let beginFrame: SQLToken = Keyword(rawValue: "BEGIN_FRAME")
  public static let beginPartition: SQLToken = Keyword(rawValue: "BEGIN_PARTITION")
  public static let bernoulli: SQLToken = Keyword(rawValue: "BERNOULLI")
  public static let between: SQLToken = Keyword(rawValue: "BETWEEN")
  public static let bigint: SQLToken = Keyword(rawValue: "BIGINT")
  public static let binary: SQLToken = Keyword(rawValue: "BINARY")
  public static let bit: SQLToken = Keyword(rawValue: "BIT")
  public static let bitLength: SQLToken = Keyword(rawValue: "BIT_LENGTH")
  public static let blob: SQLToken = Keyword(rawValue: "BLOB")
  public static let blocked: SQLToken = Keyword(rawValue: "BLOCKED")
  public static let bloom: SQLToken = Keyword(rawValue: "BLOOM")
  public static let bom: SQLToken = Keyword(rawValue: "BOM")
  public static let boolean: SQLToken = Keyword(rawValue: "BOOLEAN")
  public static let both: SQLToken = Keyword(rawValue: "BOTH")
  public static let box: SQLToken = Keyword(rawValue: "BOX")
  public static let breadth: SQLToken = Keyword(rawValue: "BREADTH")
  public static let brin: SQLToken = Keyword(rawValue: "BRIN")
  public static let btree: SQLToken = Keyword(rawValue: "BTREE")
  public static let btrim: SQLToken = Keyword(rawValue: "BTRIM")
  public static let by: SQLToken = Keyword(rawValue: "BY")
  public static let bytea: SQLToken = Keyword(rawValue: "BYTEA")
  public static let c: SQLToken = Keyword(rawValue: "C")
  public static let cache: SQLToken = Keyword(rawValue: "CACHE")
  public static let call: SQLToken = Keyword(rawValue: "CALL")
  public static let called: SQLToken = Keyword(rawValue: "CALLED")
  public static let cardinality: SQLToken = Keyword(rawValue: "CARDINALITY")
  public static let cascade: SQLToken = Keyword(rawValue: "CASCADE")
  public static let cascaded: SQLToken = Keyword(rawValue: "CASCADED")
  public static let `case`: SQLToken = Keyword(rawValue: "CASE")
  public static let cast: SQLToken = Keyword(rawValue: "CAST")
  public static let catalog: SQLToken = Keyword(rawValue: "CATALOG")
  public static let catalogName: SQLToken = Keyword(rawValue: "CATALOG_NAME")
  public static let ceil: SQLToken = Keyword(rawValue: "CEIL")
  public static let ceiling: SQLToken = Keyword(rawValue: "CEILING")
  public static let chain: SQLToken = Keyword(rawValue: "CHAIN")
  public static let chaining: SQLToken = Keyword(rawValue: "CHAINING")
  public static let char: SQLToken = Keyword(rawValue: "CHAR")
  public static let character: SQLToken = Keyword(rawValue: "CHARACTER")
  public static let characteristics: SQLToken = Keyword(rawValue: "CHARACTERISTICS")
  public static let characters: SQLToken = Keyword(rawValue: "CHARACTERS")
  public static let characterLength: SQLToken = Keyword(rawValue: "CHARACTER_LENGTH")
  public static let characterSetCatalog: SQLToken = Keyword(rawValue: "CHARACTER_SET_CATALOG")
  public static let characterSetName: SQLToken = Keyword(rawValue: "CHARACTER_SET_NAME")
  public static let characterSetSchema: SQLToken = Keyword(rawValue: "CHARACTER_SET_SCHEMA")
  public static let charLength: SQLToken = Keyword(rawValue: "CHAR_LENGTH")
  public static let check: SQLToken = Keyword(rawValue: "CHECK")
  public static let checkpoint: SQLToken = Keyword(rawValue: "CHECKPOINT")
  public static let cidr: SQLToken = Keyword(rawValue: "CIDR")
  public static let circle: SQLToken = Keyword(rawValue: "CIRCLE")
  public static let `class`: SQLToken = Keyword(rawValue: "CLASS")
  public static let classifier: SQLToken = Keyword(rawValue: "CLASSIFIER")
  public static let classOrigin: SQLToken = Keyword(rawValue: "CLASS_ORIGIN")
  public static let clob: SQLToken = Keyword(rawValue: "CLOB")
  public static let close: SQLToken = Keyword(rawValue: "CLOSE")
  public static let cluster: SQLToken = Keyword(rawValue: "CLUSTER")
  public static let coalesce: SQLToken = Keyword(rawValue: "COALESCE")
  public static let cobol: SQLToken = Keyword(rawValue: "COBOL")
  public static let collate: SQLToken = Keyword(rawValue: "COLLATE")
  public static let collation: SQLToken = Keyword(rawValue: "COLLATION")
  public static let collationCatalog: SQLToken = Keyword(rawValue: "COLLATION_CATALOG")
  public static let collationName: SQLToken = Keyword(rawValue: "COLLATION_NAME")
  public static let collationSchema: SQLToken = Keyword(rawValue: "COLLATION_SCHEMA")
  public static let collect: SQLToken = Keyword(rawValue: "COLLECT")
  public static let column: SQLToken = Keyword(rawValue: "COLUMN")
  public static let columns: SQLToken = Keyword(rawValue: "COLUMNS")
  public static let columnName: SQLToken = Keyword(rawValue: "COLUMN_NAME")
  public static let commandFunction: SQLToken = Keyword(rawValue: "COMMAND_FUNCTION")
  public static let commandFunctionCode: SQLToken = Keyword(rawValue: "COMMAND_FUNCTION_CODE")
  public static let comment: SQLToken = Keyword(rawValue: "COMMENT")
  public static let comments: SQLToken = Keyword(rawValue: "COMMENTS")
  public static let commit: SQLToken = Keyword(rawValue: "COMMIT")
  public static let committed: SQLToken = Keyword(rawValue: "COMMITTED")
  public static let compression: SQLToken = Keyword(rawValue: "COMPRESSION")
  public static let concat: SQLToken = Keyword(rawValue: "CONCAT")
  public static let concurrently: SQLToken = Keyword(rawValue: "CONCURRENTLY")
  public static let condition: SQLToken = Keyword(rawValue: "CONDITION")
  public static let conditional: SQLToken = Keyword(rawValue: "CONDITIONAL")
  public static let conditionNumber: SQLToken = Keyword(rawValue: "CONDITION_NUMBER")
  public static let configuration: SQLToken = Keyword(rawValue: "CONFIGURATION")
  public static let conflict: SQLToken = Keyword(rawValue: "CONFLICT")
  public static let connect: SQLToken = Keyword(rawValue: "CONNECT")
  public static let connection: SQLToken = Keyword(rawValue: "CONNECTION")
  public static let connectionName: SQLToken = Keyword(rawValue: "CONNECTION_NAME")
  public static let constraint: SQLToken = Keyword(rawValue: "CONSTRAINT")
  public static let constraints: SQLToken = Keyword(rawValue: "CONSTRAINTS")
  public static let constraintCatalog: SQLToken = Keyword(rawValue: "CONSTRAINT_CATALOG")
  public static let constraintName: SQLToken = Keyword(rawValue: "CONSTRAINT_NAME")
  public static let constraintSchema: SQLToken = Keyword(rawValue: "CONSTRAINT_SCHEMA")
  public static let constructor: SQLToken = Keyword(rawValue: "CONSTRUCTOR")
  public static let contains: SQLToken = Keyword(rawValue: "CONTAINS")
  public static let content: SQLToken = Keyword(rawValue: "CONTENT")
  public static let `continue`: SQLToken = Keyword(rawValue: "CONTINUE")
  public static let control: SQLToken = Keyword(rawValue: "CONTROL")
  public static let conversion: SQLToken = Keyword(rawValue: "CONVERSION")
  public static let convert: SQLToken = Keyword(rawValue: "CONVERT")
  public static let copartition: SQLToken = Keyword(rawValue: "COPARTITION")
  public static let copy: SQLToken = Keyword(rawValue: "COPY")
  public static let corr: SQLToken = Keyword(rawValue: "CORR")
  public static let corresponding: SQLToken = Keyword(rawValue: "CORRESPONDING")
  public static let cos: SQLToken = Keyword(rawValue: "COS")
  public static let cosh: SQLToken = Keyword(rawValue: "COSH")
  public static let cost: SQLToken = Keyword(rawValue: "COST")
  public static let count: SQLToken = Keyword(rawValue: "COUNT")
  public static let covarPop: SQLToken = Keyword(rawValue: "COVAR_POP")
  public static let covarSamp: SQLToken = Keyword(rawValue: "COVAR_SAMP")
  public static let create: SQLToken = Keyword(rawValue: "CREATE")
  public static let cross: SQLToken = Keyword(rawValue: "CROSS")
  public static let csv: SQLToken = Keyword(rawValue: "CSV")
  public static let cube: SQLToken = Keyword(rawValue: "CUBE")
  public static let cumeDist: SQLToken = Keyword(rawValue: "CUME_DIST")
  public static let current: SQLToken = Keyword(rawValue: "CURRENT")
  public static let currentCatalog: SQLToken = Keyword(rawValue: "CURRENT_CATALOG")
  public static let currentDate: SQLToken = Keyword(rawValue: "CURRENT_DATE")
  public static let currentDefaultTransformGroup: SQLToken = Keyword(rawValue: "CURRENT_DEFAULT_TRANSFORM_GROUP")
  public static let currentPath: SQLToken = Keyword(rawValue: "CURRENT_PATH")
  public static let currentRole: SQLToken = Keyword(rawValue: "CURRENT_ROLE")
  public static let currentRow: SQLToken = Keyword(rawValue: "CURRENT_ROW")
  public static let currentSchema: SQLToken = Keyword(rawValue: "CURRENT_SCHEMA")
  public static let currentTime: SQLToken = Keyword(rawValue: "CURRENT_TIME")
  public static let currentTimestamp: SQLToken = Keyword(rawValue: "CURRENT_TIMESTAMP")
  public static let currentTransformGroupForType: SQLToken = Keyword(rawValue: "CURRENT_TRANSFORM_GROUP_FOR_TYPE")
  public static let currentUser: SQLToken = Keyword(rawValue: "CURRENT_USER")
  public static let cursor: SQLToken = Keyword(rawValue: "CURSOR")
  public static let cursorName: SQLToken = Keyword(rawValue: "CURSOR_NAME")
  public static let cycle: SQLToken = Keyword(rawValue: "CYCLE")
  public static let data: SQLToken = Keyword(rawValue: "DATA")
  public static let database: SQLToken = Keyword(rawValue: "DATABASE")
  public static let datalink: SQLToken = Keyword(rawValue: "DATALINK")
  public static let date: SQLToken = Keyword(rawValue: "DATE")
  public static let datetimeIntervalCode: SQLToken = Keyword(rawValue: "DATETIME_INTERVAL_CODE")
  public static let datetimeIntervalPrecision: SQLToken = Keyword(rawValue: "DATETIME_INTERVAL_PRECISION")
  public static let day: SQLToken = Keyword(rawValue: "DAY")
  public static let db: SQLToken = Keyword(rawValue: "DB")
  public static let deallocate: SQLToken = Keyword(rawValue: "DEALLOCATE")
  public static let dec: SQLToken = Keyword(rawValue: "DEC")
  public static let decfloat: SQLToken = Keyword(rawValue: "DECFLOAT")
  public static let decimal: SQLToken = Keyword(rawValue: "DECIMAL")
  public static let declare: SQLToken = Keyword(rawValue: "DECLARE")
  public static let `default`: SQLToken = Keyword(rawValue: "DEFAULT")
  public static let defaults: SQLToken = Keyword(rawValue: "DEFAULTS")
  public static let deferrable: SQLToken = Keyword(rawValue: "DEFERRABLE")
  public static let deferred: SQLToken = Keyword(rawValue: "DEFERRED")
  public static let define: SQLToken = Keyword(rawValue: "DEFINE")
  public static let defined: SQLToken = Keyword(rawValue: "DEFINED")
  public static let definer: SQLToken = Keyword(rawValue: "DEFINER")
  public static let degree: SQLToken = Keyword(rawValue: "DEGREE")
  public static let delete: SQLToken = Keyword(rawValue: "DELETE")
  public static let delimiter: SQLToken = Keyword(rawValue: "DELIMITER")
  public static let delimiters: SQLToken = Keyword(rawValue: "DELIMITERS")
  public static let denseRank: SQLToken = Keyword(rawValue: "DENSE_RANK")
  public static let depends: SQLToken = Keyword(rawValue: "DEPENDS")
  public static let depth: SQLToken = Keyword(rawValue: "DEPTH")
  public static let deref: SQLToken = Keyword(rawValue: "DEREF")
  public static let derived: SQLToken = Keyword(rawValue: "DERIVED")
  public static let desc: SQLToken = Keyword(rawValue: "DESC")
  public static let describe: SQLToken = Keyword(rawValue: "DESCRIBE")
  public static let descriptor: SQLToken = Keyword(rawValue: "DESCRIPTOR")
  public static let detach: SQLToken = Keyword(rawValue: "DETACH")
  public static let deterministic: SQLToken = Keyword(rawValue: "DETERMINISTIC")
  public static let diagnostics: SQLToken = Keyword(rawValue: "DIAGNOSTICS")
  public static let dictionary: SQLToken = Keyword(rawValue: "DICTIONARY")
  public static let disable: SQLToken = Keyword(rawValue: "DISABLE")
  public static let discard: SQLToken = Keyword(rawValue: "DISCARD")
  public static let disconnect: SQLToken = Keyword(rawValue: "DISCONNECT")
  public static let dispatch: SQLToken = Keyword(rawValue: "DISPATCH")
  public static let distinct: SQLToken = Keyword(rawValue: "DISTINCT")
  public static let dlnewcopy: SQLToken = Keyword(rawValue: "DLNEWCOPY")
  public static let dlpreviouscopy: SQLToken = Keyword(rawValue: "DLPREVIOUSCOPY")
  public static let dlurlcomplete: SQLToken = Keyword(rawValue: "DLURLCOMPLETE")
  public static let dlurlcompleteonly: SQLToken = Keyword(rawValue: "DLURLCOMPLETEONLY")
  public static let dlurlcompletewrite: SQLToken = Keyword(rawValue: "DLURLCOMPLETEWRITE")
  public static let dlurlpath: SQLToken = Keyword(rawValue: "DLURLPATH")
  public static let dlurlpathonly: SQLToken = Keyword(rawValue: "DLURLPATHONLY")
  public static let dlurlpathwrite: SQLToken = Keyword(rawValue: "DLURLPATHWRITE")
  public static let dlurlscheme: SQLToken = Keyword(rawValue: "DLURLSCHEME")
  public static let dlurlserver: SQLToken = Keyword(rawValue: "DLURLSERVER")
  public static let dlvalue: SQLToken = Keyword(rawValue: "DLVALUE")
  public static let `do`: SQLToken = Keyword(rawValue: "DO")
  public static let document: SQLToken = Keyword(rawValue: "DOCUMENT")
  public static let domain: SQLToken = Keyword(rawValue: "DOMAIN")
  public static let double: SQLToken = Keyword(rawValue: "DOUBLE")
  public static let drop: SQLToken = Keyword(rawValue: "DROP")
  public static let dynamic: SQLToken = Keyword(rawValue: "DYNAMIC")
  public static let dynamicFunction: SQLToken = Keyword(rawValue: "DYNAMIC_FUNCTION")
  public static let dynamicFunctionCode: SQLToken = Keyword(rawValue: "DYNAMIC_FUNCTION_CODE")
  public static let each: SQLToken = Keyword(rawValue: "EACH")
  public static let element: SQLToken = Keyword(rawValue: "ELEMENT")
  public static let `else`: SQLToken = Keyword(rawValue: "ELSE")
  public static let empty: SQLToken = Keyword(rawValue: "EMPTY")
  public static let enable: SQLToken = Keyword(rawValue: "ENABLE")
  public static let encoding: SQLToken = Keyword(rawValue: "ENCODING")
  public static let encrypted: SQLToken = Keyword(rawValue: "ENCRYPTED")
  public static let end: SQLToken = Keyword(rawValue: "END")
  public static let endExec: SQLToken = Keyword(rawValue: "END-EXEC")
  public static let endFrame: SQLToken = Keyword(rawValue: "END_FRAME")
  public static let endPartition: SQLToken = Keyword(rawValue: "END_PARTITION")
  public static let enforced: SQLToken = Keyword(rawValue: "ENFORCED")
  public static let `enum`: SQLToken = Keyword(rawValue: "ENUM")
  public static let equals: SQLToken = Keyword(rawValue: "EQUALS")
  public static let error: SQLToken = Keyword(rawValue: "ERROR")
  public static let escape: SQLToken = Keyword(rawValue: "ESCAPE")
  public static let event: SQLToken = Keyword(rawValue: "EVENT")
  public static let every: SQLToken = Keyword(rawValue: "EVERY")
  public static let except: SQLToken = Keyword(rawValue: "EXCEPT")
  public static let exception: SQLToken = Keyword(rawValue: "EXCEPTION")
  public static let exclude: SQLToken = Keyword(rawValue: "EXCLUDE")
  public static let excluding: SQLToken = Keyword(rawValue: "EXCLUDING")
  public static let exclusive: SQLToken = Keyword(rawValue: "EXCLUSIVE")
  public static let exec: SQLToken = Keyword(rawValue: "EXEC")
  public static let execute: SQLToken = Keyword(rawValue: "EXECUTE")
  public static let exists: SQLToken = Keyword(rawValue: "EXISTS")
  public static let exp: SQLToken = Keyword(rawValue: "EXP")
  public static let explain: SQLToken = Keyword(rawValue: "EXPLAIN")
  public static let expression: SQLToken = Keyword(rawValue: "EXPRESSION")
  public static let `extension`: SQLToken = Keyword(rawValue: "EXTENSION")
  public static let external: SQLToken = Keyword(rawValue: "EXTERNAL")
  public static let extract: SQLToken = Keyword(rawValue: "EXTRACT")
  public static let `false`: SQLToken = Keyword(rawValue: "FALSE")
  public static let family: SQLToken = Keyword(rawValue: "FAMILY")
  public static let fetch: SQLToken = Keyword(rawValue: "FETCH")
  public static let file: SQLToken = Keyword(rawValue: "FILE")
  public static let filter: SQLToken = Keyword(rawValue: "FILTER")
  public static let final: SQLToken = Keyword(rawValue: "FINAL")
  public static let finalize: SQLToken = Keyword(rawValue: "FINALIZE")
  public static let finish: SQLToken = Keyword(rawValue: "FINISH")
  public static let first: SQLToken = Keyword(rawValue: "FIRST")
  public static let firstValue: SQLToken = Keyword(rawValue: "FIRST_VALUE")
  public static let flag: SQLToken = Keyword(rawValue: "FLAG")
  public static let float: SQLToken = Keyword(rawValue: "FLOAT")
  public static let floor: SQLToken = Keyword(rawValue: "FLOOR")
  public static let following: SQLToken = Keyword(rawValue: "FOLLOWING")
  public static let `for`: SQLToken = Keyword(rawValue: "FOR")
  public static let force: SQLToken = Keyword(rawValue: "FORCE")
  public static let foreign: SQLToken = Keyword(rawValue: "FOREIGN")
  public static let format: SQLToken = Keyword(rawValue: "FORMAT")
  public static let fortran: SQLToken = Keyword(rawValue: "FORTRAN")
  public static let forward: SQLToken = Keyword(rawValue: "FORWARD")
  public static let found: SQLToken = Keyword(rawValue: "FOUND")
  public static let frameRow: SQLToken = Keyword(rawValue: "FRAME_ROW")
  public static let free: SQLToken = Keyword(rawValue: "FREE")
  public static let freeze: SQLToken = Keyword(rawValue: "FREEZE")
  public static let from: SQLToken = Keyword(rawValue: "FROM")
  public static let fs: SQLToken = Keyword(rawValue: "FS")
  public static let fulfill: SQLToken = Keyword(rawValue: "FULFILL")
  public static let full: SQLToken = Keyword(rawValue: "FULL")
  public static let function: SQLToken = Keyword(rawValue: "FUNCTION")
  public static let functions: SQLToken = Keyword(rawValue: "FUNCTIONS")
  public static let fusion: SQLToken = Keyword(rawValue: "FUSION")
  public static let g: SQLToken = Keyword(rawValue: "G")
  public static let general: SQLToken = Keyword(rawValue: "GENERAL")
  public static let generated: SQLToken = Keyword(rawValue: "GENERATED")
  public static let get: SQLToken = Keyword(rawValue: "GET")
  public static let gin: SQLToken = Keyword(rawValue: "GIN")
  public static let gist: SQLToken = Keyword(rawValue: "GIST")
  public static let global: SQLToken = Keyword(rawValue: "GLOBAL")
  public static let go: SQLToken = Keyword(rawValue: "GO")
  public static let goto: SQLToken = Keyword(rawValue: "GOTO")
  public static let grant: SQLToken = Keyword(rawValue: "GRANT")
  public static let granted: SQLToken = Keyword(rawValue: "GRANTED")
  public static let greatest: SQLToken = Keyword(rawValue: "GREATEST")
  public static let group: SQLToken = Keyword(rawValue: "GROUP")
  public static let grouping: SQLToken = Keyword(rawValue: "GROUPING")
  public static let groups: SQLToken = Keyword(rawValue: "GROUPS")
  public static let handler: SQLToken = Keyword(rawValue: "HANDLER")
  public static let hash: SQLToken = Keyword(rawValue: "HASH")
  public static let having: SQLToken = Keyword(rawValue: "HAVING")
  public static let header: SQLToken = Keyword(rawValue: "HEADER")
  public static let hex: SQLToken = Keyword(rawValue: "HEX")
  public static let hierarchy: SQLToken = Keyword(rawValue: "HIERARCHY")
  public static let hold: SQLToken = Keyword(rawValue: "HOLD")
  public static let hour: SQLToken = Keyword(rawValue: "HOUR")
  public static let id: SQLToken = Keyword(rawValue: "ID")
  public static let identity: SQLToken = Keyword(rawValue: "IDENTITY")
  public static let `if`: SQLToken = Keyword(rawValue: "IF")
  public static let ignore: SQLToken = Keyword(rawValue: "IGNORE")
  public static let ilike: SQLToken = Keyword(rawValue: "ILIKE")
  public static let immediate: SQLToken = Keyword(rawValue: "IMMEDIATE")
  public static let immediately: SQLToken = Keyword(rawValue: "IMMEDIATELY")
  public static let immutable: SQLToken = Keyword(rawValue: "IMMUTABLE")
  public static let implementation: SQLToken = Keyword(rawValue: "IMPLEMENTATION")
  public static let implicit: SQLToken = Keyword(rawValue: "IMPLICIT")
  public static let `import`: SQLToken = Keyword(rawValue: "IMPORT")
  public static let `in`: SQLToken = Keyword(rawValue: "IN")
  public static let include: SQLToken = Keyword(rawValue: "INCLUDE")
  public static let including: SQLToken = Keyword(rawValue: "INCLUDING")
  public static let increment: SQLToken = Keyword(rawValue: "INCREMENT")
  public static let indent: SQLToken = Keyword(rawValue: "INDENT")
  public static let index: SQLToken = Keyword(rawValue: "INDEX")
  public static let indexes: SQLToken = Keyword(rawValue: "INDEXES")
  public static let indicator: SQLToken = Keyword(rawValue: "INDICATOR")
  public static let inet: SQLToken = Keyword(rawValue: "INET")
  public static let inherit: SQLToken = Keyword(rawValue: "INHERIT")
  public static let inherits: SQLToken = Keyword(rawValue: "INHERITS")
  public static let initial: SQLToken = Keyword(rawValue: "INITIAL")
  public static let initially: SQLToken = Keyword(rawValue: "INITIALLY")
  public static let inline: SQLToken = Keyword(rawValue: "INLINE")
  public static let inner: SQLToken = Keyword(rawValue: "INNER")
  public static let `inout`: SQLToken = Keyword(rawValue: "INOUT")
  public static let input: SQLToken = Keyword(rawValue: "INPUT")
  public static let insensitive: SQLToken = Keyword(rawValue: "INSENSITIVE")
  public static let insert: SQLToken = Keyword(rawValue: "INSERT")
  public static let instance: SQLToken = Keyword(rawValue: "INSTANCE")
  public static let instantiable: SQLToken = Keyword(rawValue: "INSTANTIABLE")
  public static let instead: SQLToken = Keyword(rawValue: "INSTEAD")
  public static let int: SQLToken = Keyword(rawValue: "INT")
  public static let integer: SQLToken = Keyword(rawValue: "INTEGER")
  public static let integrity: SQLToken = Keyword(rawValue: "INTEGRITY")
  public static let intersect: SQLToken = Keyword(rawValue: "INTERSECT")
  public static let intersection: SQLToken = Keyword(rawValue: "INTERSECTION")
  public static let interval: SQLToken = Keyword(rawValue: "INTERVAL")
  public static let into: SQLToken = Keyword(rawValue: "INTO")
  public static let invoker: SQLToken = Keyword(rawValue: "INVOKER")
  public static let `is`: SQLToken = Keyword(rawValue: "IS")
  public static let isnull: SQLToken = Keyword(rawValue: "ISNULL")
  public static let isolation: SQLToken = Keyword(rawValue: "ISOLATION")
  public static let join: SQLToken = Keyword(rawValue: "JOIN")
  public static let json: SQLToken = Keyword(rawValue: "JSON")
  public static let jsonArray: SQLToken = Keyword(rawValue: "JSON_ARRAY")
  public static let jsonArrayagg: SQLToken = Keyword(rawValue: "JSON_ARRAYAGG")
  public static let jsonb: SQLToken = Keyword(rawValue: "JSONB")
  public static let jsonExists: SQLToken = Keyword(rawValue: "JSON_EXISTS")
  public static let jsonObject: SQLToken = Keyword(rawValue: "JSON_OBJECT")
  public static let jsonObjectagg: SQLToken = Keyword(rawValue: "JSON_OBJECTAGG")
  public static let jsonQuery: SQLToken = Keyword(rawValue: "JSON_QUERY")
  public static let jsonScalar: SQLToken = Keyword(rawValue: "JSON_SCALAR")
  public static let jsonSerialize: SQLToken = Keyword(rawValue: "JSON_SERIALIZE")
  public static let jsonTable: SQLToken = Keyword(rawValue: "JSON_TABLE")
  public static let jsonTablePrimitive: SQLToken = Keyword(rawValue: "JSON_TABLE_PRIMITIVE")
  public static let jsonValue: SQLToken = Keyword(rawValue: "JSON_VALUE")
  public static let k: SQLToken = Keyword(rawValue: "K")
  public static let keep: SQLToken = Keyword(rawValue: "KEEP")
  public static let key: SQLToken = Keyword(rawValue: "KEY")
  public static let keys: SQLToken = Keyword(rawValue: "KEYS")
  public static let keyMember: SQLToken = Keyword(rawValue: "KEY_MEMBER")
  public static let keyType: SQLToken = Keyword(rawValue: "KEY_TYPE")
  public static let label: SQLToken = Keyword(rawValue: "LABEL")
  public static let lag: SQLToken = Keyword(rawValue: "LAG")
  public static let language: SQLToken = Keyword(rawValue: "LANGUAGE")
  public static let large: SQLToken = Keyword(rawValue: "LARGE")
  public static let last: SQLToken = Keyword(rawValue: "LAST")
  public static let lastValue: SQLToken = Keyword(rawValue: "LAST_VALUE")
  public static let lateral: SQLToken = Keyword(rawValue: "LATERAL")
  public static let lead: SQLToken = Keyword(rawValue: "LEAD")
  public static let leading: SQLToken = Keyword(rawValue: "LEADING")
  public static let leakproof: SQLToken = Keyword(rawValue: "LEAKPROOF")
  public static let least: SQLToken = Keyword(rawValue: "LEAST")
  public static let left: SQLToken = Keyword(rawValue: "LEFT")
  public static let length: SQLToken = Keyword(rawValue: "LENGTH")
  public static let level: SQLToken = Keyword(rawValue: "LEVEL")
  public static let library: SQLToken = Keyword(rawValue: "LIBRARY")
  public static let like: SQLToken = Keyword(rawValue: "LIKE")
  public static let likeRegex: SQLToken = Keyword(rawValue: "LIKE_REGEX")
  public static let limit: SQLToken = Keyword(rawValue: "LIMIT")
  public static let line: SQLToken = Keyword(rawValue: "LINE")
  public static let link: SQLToken = Keyword(rawValue: "LINK")
  public static let listagg: SQLToken = Keyword(rawValue: "LISTAGG")
  public static let listen: SQLToken = Keyword(rawValue: "LISTEN")
  public static let ln: SQLToken = Keyword(rawValue: "LN")
  public static let load: SQLToken = Keyword(rawValue: "LOAD")
  public static let local: SQLToken = Keyword(rawValue: "LOCAL")
  public static let localtime: SQLToken = Keyword(rawValue: "LOCALTIME")
  public static let localtimestamp: SQLToken = Keyword(rawValue: "LOCALTIMESTAMP")
  public static let location: SQLToken = Keyword(rawValue: "LOCATION")
  public static let locator: SQLToken = Keyword(rawValue: "LOCATOR")
  public static let lock: SQLToken = Keyword(rawValue: "LOCK")
  public static let locked: SQLToken = Keyword(rawValue: "LOCKED")
  public static let log: SQLToken = Keyword(rawValue: "LOG")
  public static let log10: SQLToken = Keyword(rawValue: "LOG10")
  public static let logged: SQLToken = Keyword(rawValue: "LOGGED")
  public static let lower: SQLToken = Keyword(rawValue: "LOWER")
  public static let lpad: SQLToken = Keyword(rawValue: "LPAD")
  public static let lseg: SQLToken = Keyword(rawValue: "LSEG")
  public static let ltrim: SQLToken = Keyword(rawValue: "LTRIM")
  public static let m: SQLToken = Keyword(rawValue: "M")
  public static let macaddr: SQLToken = Keyword(rawValue: "MACADDR")
  public static let macaddr8: SQLToken = Keyword(rawValue: "MACADDR8")
  public static let map: SQLToken = Keyword(rawValue: "MAP")
  public static let mapping: SQLToken = Keyword(rawValue: "MAPPING")
  public static let match: SQLToken = Keyword(rawValue: "MATCH")
  public static let matched: SQLToken = Keyword(rawValue: "MATCHED")
  public static let matches: SQLToken = Keyword(rawValue: "MATCHES")
  public static let matchNumber: SQLToken = Keyword(rawValue: "MATCH_NUMBER")
  public static let matchRecognize: SQLToken = Keyword(rawValue: "MATCH_RECOGNIZE")
  public static let materialized: SQLToken = Keyword(rawValue: "MATERIALIZED")
  public static let max: SQLToken = Keyword(rawValue: "MAX")
  public static let maxvalue: SQLToken = Keyword(rawValue: "MAXVALUE")
  public static let measures: SQLToken = Keyword(rawValue: "MEASURES")
  public static let member: SQLToken = Keyword(rawValue: "MEMBER")
  public static let merge: SQLToken = Keyword(rawValue: "MERGE")
  public static let messageLength: SQLToken = Keyword(rawValue: "MESSAGE_LENGTH")
  public static let messageOctetLength: SQLToken = Keyword(rawValue: "MESSAGE_OCTET_LENGTH")
  public static let messageText: SQLToken = Keyword(rawValue: "MESSAGE_TEXT")
  public static let method: SQLToken = Keyword(rawValue: "METHOD")
  public static let min: SQLToken = Keyword(rawValue: "MIN")
  public static let minute: SQLToken = Keyword(rawValue: "MINUTE")
  public static let minvalue: SQLToken = Keyword(rawValue: "MINVALUE")
  public static let mod: SQLToken = Keyword(rawValue: "MOD")
  public static let mode: SQLToken = Keyword(rawValue: "MODE")
  public static let modifies: SQLToken = Keyword(rawValue: "MODIFIES")
  public static let module: SQLToken = Keyword(rawValue: "MODULE")
  public static let money: SQLToken = Keyword(rawValue: "MONEY")
  public static let month: SQLToken = Keyword(rawValue: "MONTH")
  public static let more: SQLToken = Keyword(rawValue: "MORE")
  public static let move: SQLToken = Keyword(rawValue: "MOVE")
  public static let multiset: SQLToken = Keyword(rawValue: "MULTISET")
  public static let mumps: SQLToken = Keyword(rawValue: "MUMPS")
  public static let name: SQLToken = Keyword(rawValue: "NAME")
  public static let names: SQLToken = Keyword(rawValue: "NAMES")
  public static let namespace: SQLToken = Keyword(rawValue: "NAMESPACE")
  public static let national: SQLToken = Keyword(rawValue: "NATIONAL")
  public static let natural: SQLToken = Keyword(rawValue: "NATURAL")
  public static let nchar: SQLToken = Keyword(rawValue: "NCHAR")
  public static let nclob: SQLToken = Keyword(rawValue: "NCLOB")
  public static let nested: SQLToken = Keyword(rawValue: "NESTED")
  public static let nesting: SQLToken = Keyword(rawValue: "NESTING")
  public static let new: SQLToken = Keyword(rawValue: "NEW")
  public static let next: SQLToken = Keyword(rawValue: "NEXT")
  public static let nfc: SQLToken = Keyword(rawValue: "NFC")
  public static let nfd: SQLToken = Keyword(rawValue: "NFD")
  public static let nfkc: SQLToken = Keyword(rawValue: "NFKC")
  public static let nfkd: SQLToken = Keyword(rawValue: "NFKD")
  public static let `nil`: SQLToken = Keyword(rawValue: "NIL")
  public static let no: SQLToken = Keyword(rawValue: "NO")
  public static let none: SQLToken = Keyword(rawValue: "NONE")
  public static let normalize: SQLToken = Keyword(rawValue: "NORMALIZE")
  public static let normalized: SQLToken = Keyword(rawValue: "NORMALIZED")
  public static let not: SQLToken = Keyword(rawValue: "NOT")
  public static let nothing: SQLToken = Keyword(rawValue: "NOTHING")
  public static let notify: SQLToken = Keyword(rawValue: "NOTIFY")
  public static let notnull: SQLToken = Keyword(rawValue: "NOTNULL")
  public static let nowait: SQLToken = Keyword(rawValue: "NOWAIT")
  public static let nthValue: SQLToken = Keyword(rawValue: "NTH_VALUE")
  public static let ntile: SQLToken = Keyword(rawValue: "NTILE")
  public static let null: SQLToken = Keyword(rawValue: "NULL")
  public static let nullable: SQLToken = Keyword(rawValue: "NULLABLE")
  public static let nullif: SQLToken = Keyword(rawValue: "NULLIF")
  public static let nulls: SQLToken = Keyword(rawValue: "NULLS")
  public static let nullOrdering: SQLToken = Keyword(rawValue: "NULL_ORDERING")
  public static let number: SQLToken = Keyword(rawValue: "NUMBER")
  public static let numeric: SQLToken = Keyword(rawValue: "NUMERIC")
  public static let object: SQLToken = Keyword(rawValue: "OBJECT")
  public static let occurrence: SQLToken = Keyword(rawValue: "OCCURRENCE")
  public static let occurrencesRegex: SQLToken = Keyword(rawValue: "OCCURRENCES_REGEX")
  public static let octets: SQLToken = Keyword(rawValue: "OCTETS")
  public static let octetLength: SQLToken = Keyword(rawValue: "OCTET_LENGTH")
  public static let of: SQLToken = Keyword(rawValue: "OF")
  public static let off: SQLToken = Keyword(rawValue: "OFF")
  public static let offset: SQLToken = Keyword(rawValue: "OFFSET")
  public static let oids: SQLToken = Keyword(rawValue: "OIDS")
  public static let old: SQLToken = Keyword(rawValue: "OLD")
  public static let omit: SQLToken = Keyword(rawValue: "OMIT")
  public static let on: SQLToken = Keyword(rawValue: "ON")
  public static let one: SQLToken = Keyword(rawValue: "ONE")
  public static let only: SQLToken = Keyword(rawValue: "ONLY")
  public static let open: SQLToken = Keyword(rawValue: "OPEN")
  public static let `operator`: SQLToken = Keyword(rawValue: "OPERATOR")
  public static let option: SQLToken = Keyword(rawValue: "OPTION")
  public static let options: SQLToken = Keyword(rawValue: "OPTIONS")
  public static let or: SQLToken = Keyword(rawValue: "OR")
  public static let order: SQLToken = Keyword(rawValue: "ORDER")
  public static let ordering: SQLToken = Keyword(rawValue: "ORDERING")
  public static let ordinality: SQLToken = Keyword(rawValue: "ORDINALITY")
  public static let others: SQLToken = Keyword(rawValue: "OTHERS")
  public static let out: SQLToken = Keyword(rawValue: "OUT")
  public static let outer: SQLToken = Keyword(rawValue: "OUTER")
  public static let output: SQLToken = Keyword(rawValue: "OUTPUT")
  public static let over: SQLToken = Keyword(rawValue: "OVER")
  public static let overflow: SQLToken = Keyword(rawValue: "OVERFLOW")
  public static let overlaps: SQLToken = Keyword(rawValue: "OVERLAPS")
  public static let overlay: SQLToken = Keyword(rawValue: "OVERLAY")
  public static let overriding: SQLToken = Keyword(rawValue: "OVERRIDING")
  public static let owned: SQLToken = Keyword(rawValue: "OWNED")
  public static let owner: SQLToken = Keyword(rawValue: "OWNER")
  public static let p: SQLToken = Keyword(rawValue: "P")
  public static let pad: SQLToken = Keyword(rawValue: "PAD")
  public static let parallel: SQLToken = Keyword(rawValue: "PARALLEL")
  public static let parameter: SQLToken = Keyword(rawValue: "PARAMETER")
  public static let parameterMode: SQLToken = Keyword(rawValue: "PARAMETER_MODE")
  public static let parameterName: SQLToken = Keyword(rawValue: "PARAMETER_NAME")
  public static let parameterOrdinalPosition: SQLToken = Keyword(rawValue: "PARAMETER_ORDINAL_POSITION")
  public static let parameterSpecificCatalog: SQLToken = Keyword(rawValue: "PARAMETER_SPECIFIC_CATALOG")
  public static let parameterSpecificName: SQLToken = Keyword(rawValue: "PARAMETER_SPECIFIC_NAME")
  public static let parameterSpecificSchema: SQLToken = Keyword(rawValue: "PARAMETER_SPECIFIC_SCHEMA")
  public static let parser: SQLToken = Keyword(rawValue: "PARSER")
  public static let partial: SQLToken = Keyword(rawValue: "PARTIAL")
  public static let partition: SQLToken = Keyword(rawValue: "PARTITION")
  public static let pascal: SQLToken = Keyword(rawValue: "PASCAL")
  public static let pass: SQLToken = Keyword(rawValue: "PASS")
  public static let passing: SQLToken = Keyword(rawValue: "PASSING")
  public static let passthrough: SQLToken = Keyword(rawValue: "PASSTHROUGH")
  public static let password: SQLToken = Keyword(rawValue: "PASSWORD")
  public static let past: SQLToken = Keyword(rawValue: "PAST")
  public static let path: SQLToken = Keyword(rawValue: "PATH")
  public static let pattern: SQLToken = Keyword(rawValue: "PATTERN")
  public static let per: SQLToken = Keyword(rawValue: "PER")
  public static let percent: SQLToken = Keyword(rawValue: "PERCENT")
  public static let percentileCont: SQLToken = Keyword(rawValue: "PERCENTILE_CONT")
  public static let percentileDisc: SQLToken = Keyword(rawValue: "PERCENTILE_DISC")
  public static let percentRank: SQLToken = Keyword(rawValue: "PERCENT_RANK")
  public static let period: SQLToken = Keyword(rawValue: "PERIOD")
  public static let permission: SQLToken = Keyword(rawValue: "PERMISSION")
  public static let permute: SQLToken = Keyword(rawValue: "PERMUTE")
  public static let pipe: SQLToken = Keyword(rawValue: "PIPE")
  public static let placing: SQLToken = Keyword(rawValue: "PLACING")
  public static let plan: SQLToken = Keyword(rawValue: "PLAN")
  public static let plans: SQLToken = Keyword(rawValue: "PLANS")
  public static let pli: SQLToken = Keyword(rawValue: "PLI")
  public static let point: SQLToken = Keyword(rawValue: "POINT")
  public static let policy: SQLToken = Keyword(rawValue: "POLICY")
  public static let polygon: SQLToken = Keyword(rawValue: "POLYGON")
  public static let portion: SQLToken = Keyword(rawValue: "PORTION")
  public static let position: SQLToken = Keyword(rawValue: "POSITION")
  public static let positionRegex: SQLToken = Keyword(rawValue: "POSITION_REGEX")
  public static let power: SQLToken = Keyword(rawValue: "POWER")
  public static let precedes: SQLToken = Keyword(rawValue: "PRECEDES")
  public static let preceding: SQLToken = Keyword(rawValue: "PRECEDING")
  public static let precision: SQLToken = Keyword(rawValue: "PRECISION")
  public static let prepare: SQLToken = Keyword(rawValue: "PREPARE")
  public static let prepared: SQLToken = Keyword(rawValue: "PREPARED")
  public static let preserve: SQLToken = Keyword(rawValue: "PRESERVE")
  public static let prev: SQLToken = Keyword(rawValue: "PREV")
  public static let primary: SQLToken = Keyword(rawValue: "PRIMARY")
  public static let prior: SQLToken = Keyword(rawValue: "PRIOR")
  public static let `private`: SQLToken = Keyword(rawValue: "PRIVATE")
  public static let privileges: SQLToken = Keyword(rawValue: "PRIVILEGES")
  public static let procedural: SQLToken = Keyword(rawValue: "PROCEDURAL")
  public static let procedure: SQLToken = Keyword(rawValue: "PROCEDURE")
  public static let procedures: SQLToken = Keyword(rawValue: "PROCEDURES")
  public static let program: SQLToken = Keyword(rawValue: "PROGRAM")
  public static let prune: SQLToken = Keyword(rawValue: "PRUNE")
  public static let ptf: SQLToken = Keyword(rawValue: "PTF")
  public static let `public`: SQLToken = Keyword(rawValue: "PUBLIC")
  public static let publication: SQLToken = Keyword(rawValue: "PUBLICATION")
  public static let quote: SQLToken = Keyword(rawValue: "QUOTE")
  public static let quotes: SQLToken = Keyword(rawValue: "QUOTES")
  public static let range: SQLToken = Keyword(rawValue: "RANGE")
  public static let rank: SQLToken = Keyword(rawValue: "RANK")
  public static let read: SQLToken = Keyword(rawValue: "READ")
  public static let reads: SQLToken = Keyword(rawValue: "READS")
  public static let real: SQLToken = Keyword(rawValue: "REAL")
  public static let reassign: SQLToken = Keyword(rawValue: "REASSIGN")
  public static let recheck: SQLToken = Keyword(rawValue: "RECHECK")
  public static let recovery: SQLToken = Keyword(rawValue: "RECOVERY")
  public static let recursive: SQLToken = Keyword(rawValue: "RECURSIVE")
  public static let ref: SQLToken = Keyword(rawValue: "REF")
  public static let references: SQLToken = Keyword(rawValue: "REFERENCES")
  public static let referencing: SQLToken = Keyword(rawValue: "REFERENCING")
  public static let refresh: SQLToken = Keyword(rawValue: "REFRESH")
  public static let regrAvgx: SQLToken = Keyword(rawValue: "REGR_AVGX")
  public static let regrAvgy: SQLToken = Keyword(rawValue: "REGR_AVGY")
  public static let regrCount: SQLToken = Keyword(rawValue: "REGR_COUNT")
  public static let regrIntercept: SQLToken = Keyword(rawValue: "REGR_INTERCEPT")
  public static let regrR2: SQLToken = Keyword(rawValue: "REGR_R2")
  public static let regrSlope: SQLToken = Keyword(rawValue: "REGR_SLOPE")
  public static let regrSxx: SQLToken = Keyword(rawValue: "REGR_SXX")
  public static let regrSxy: SQLToken = Keyword(rawValue: "REGR_SXY")
  public static let regrSyy: SQLToken = Keyword(rawValue: "REGR_SYY")
  public static let reindex: SQLToken = Keyword(rawValue: "REINDEX")
  public static let relative: SQLToken = Keyword(rawValue: "RELATIVE")
  public static let release: SQLToken = Keyword(rawValue: "RELEASE")
  public static let rename: SQLToken = Keyword(rawValue: "RENAME")
  public static let repeatable: SQLToken = Keyword(rawValue: "REPEATABLE")
  public static let replace: SQLToken = Keyword(rawValue: "REPLACE")
  public static let replica: SQLToken = Keyword(rawValue: "REPLICA")
  public static let requiring: SQLToken = Keyword(rawValue: "REQUIRING")
  public static let reset: SQLToken = Keyword(rawValue: "RESET")
  public static let respect: SQLToken = Keyword(rawValue: "RESPECT")
  public static let restart: SQLToken = Keyword(rawValue: "RESTART")
  public static let restore: SQLToken = Keyword(rawValue: "RESTORE")
  public static let restrict: SQLToken = Keyword(rawValue: "RESTRICT")
  public static let result: SQLToken = Keyword(rawValue: "RESULT")
  public static let `return`: SQLToken = Keyword(rawValue: "RETURN")
  public static let returnedCardinality: SQLToken = Keyword(rawValue: "RETURNED_CARDINALITY")
  public static let returnedLength: SQLToken = Keyword(rawValue: "RETURNED_LENGTH")
  public static let returnedOctetLength: SQLToken = Keyword(rawValue: "RETURNED_OCTET_LENGTH")
  public static let returnedSqlstate: SQLToken = Keyword(rawValue: "RETURNED_SQLSTATE")
  public static let returning: SQLToken = Keyword(rawValue: "RETURNING")
  public static let returns: SQLToken = Keyword(rawValue: "RETURNS")
  public static let revoke: SQLToken = Keyword(rawValue: "REVOKE")
  public static let right: SQLToken = Keyword(rawValue: "RIGHT")
  public static let role: SQLToken = Keyword(rawValue: "ROLE")
  public static let rollback: SQLToken = Keyword(rawValue: "ROLLBACK")
  public static let rollup: SQLToken = Keyword(rawValue: "ROLLUP")
  public static let round: SQLToken = Keyword(rawValue: "ROUND")
  public static let routine: SQLToken = Keyword(rawValue: "ROUTINE")
  public static let routines: SQLToken = Keyword(rawValue: "ROUTINES")
  public static let routineCatalog: SQLToken = Keyword(rawValue: "ROUTINE_CATALOG")
  public static let routineName: SQLToken = Keyword(rawValue: "ROUTINE_NAME")
  public static let routineSchema: SQLToken = Keyword(rawValue: "ROUTINE_SCHEMA")
  public static let row: SQLToken = Keyword(rawValue: "ROW")
  public static let rows: SQLToken = Keyword(rawValue: "ROWS")
  public static let rowCount: SQLToken = Keyword(rawValue: "ROW_COUNT")
  public static let rowNumber: SQLToken = Keyword(rawValue: "ROW_NUMBER")
  public static let rpad: SQLToken = Keyword(rawValue: "RPAD")
  public static let rtrim: SQLToken = Keyword(rawValue: "RTRIM")
  public static let rule: SQLToken = Keyword(rawValue: "RULE")
  public static let running: SQLToken = Keyword(rawValue: "RUNNING")
  public static let savepoint: SQLToken = Keyword(rawValue: "SAVEPOINT")
  public static let scalar: SQLToken = Keyword(rawValue: "SCALAR")
  public static let scale: SQLToken = Keyword(rawValue: "SCALE")
  public static let schema: SQLToken = Keyword(rawValue: "SCHEMA")
  public static let schemas: SQLToken = Keyword(rawValue: "SCHEMAS")
  public static let schemaName: SQLToken = Keyword(rawValue: "SCHEMA_NAME")
  public static let scope: SQLToken = Keyword(rawValue: "SCOPE")
  public static let scopeCatalog: SQLToken = Keyword(rawValue: "SCOPE_CATALOG")
  public static let scopeName: SQLToken = Keyword(rawValue: "SCOPE_NAME")
  public static let scopeSchema: SQLToken = Keyword(rawValue: "SCOPE_SCHEMA")
  public static let scroll: SQLToken = Keyword(rawValue: "SCROLL")
  public static let search: SQLToken = Keyword(rawValue: "SEARCH")
  public static let second: SQLToken = Keyword(rawValue: "SECOND")
  public static let section: SQLToken = Keyword(rawValue: "SECTION")
  public static let security: SQLToken = Keyword(rawValue: "SECURITY")
  public static let seek: SQLToken = Keyword(rawValue: "SEEK")
  public static let select: SQLToken = Keyword(rawValue: "SELECT")
  public static let selective: SQLToken = Keyword(rawValue: "SELECTIVE")
  public static let `self`: SQLToken = Keyword(rawValue: "SELF")
  public static let semantics: SQLToken = Keyword(rawValue: "SEMANTICS")
  public static let sensitive: SQLToken = Keyword(rawValue: "SENSITIVE")
  public static let sequence: SQLToken = Keyword(rawValue: "SEQUENCE")
  public static let sequences: SQLToken = Keyword(rawValue: "SEQUENCES")
  public static let serial: SQLToken = Keyword(rawValue: "SERIAL")
  public static let serializable: SQLToken = Keyword(rawValue: "SERIALIZABLE")
  public static let server: SQLToken = Keyword(rawValue: "SERVER")
  public static let serverName: SQLToken = Keyword(rawValue: "SERVER_NAME")
  public static let session: SQLToken = Keyword(rawValue: "SESSION")
  public static let sessionUser: SQLToken = Keyword(rawValue: "SESSION_USER")
  public static let set: SQLToken = Keyword(rawValue: "SET")
  public static let setof: SQLToken = Keyword(rawValue: "SETOF")
  public static let sets: SQLToken = Keyword(rawValue: "SETS")
  public static let share: SQLToken = Keyword(rawValue: "SHARE")
  public static let show: SQLToken = Keyword(rawValue: "SHOW")
  public static let similar: SQLToken = Keyword(rawValue: "SIMILAR")
  public static let simple: SQLToken = Keyword(rawValue: "SIMPLE")
  public static let sin: SQLToken = Keyword(rawValue: "SIN")
  public static let sinh: SQLToken = Keyword(rawValue: "SINH")
  public static let size: SQLToken = Keyword(rawValue: "SIZE")
  public static let skip: SQLToken = Keyword(rawValue: "SKIP")
  public static let smallint: SQLToken = Keyword(rawValue: "SMALLINT")
  public static let smallserial: SQLToken = Keyword(rawValue: "SMALLSERIAL")
  public static let snapshot: SQLToken = Keyword(rawValue: "SNAPSHOT")
  public static let some: SQLToken = Keyword(rawValue: "SOME")
  public static let sortDirection: SQLToken = Keyword(rawValue: "SORT_DIRECTION")
  public static let source: SQLToken = Keyword(rawValue: "SOURCE")
  public static let space: SQLToken = Keyword(rawValue: "SPACE")
  public static let specific: SQLToken = Keyword(rawValue: "SPECIFIC")
  public static let specifictype: SQLToken = Keyword(rawValue: "SPECIFICTYPE")
  public static let specificName: SQLToken = Keyword(rawValue: "SPECIFIC_NAME")
  public static let spgist: SQLToken = Keyword(rawValue: "SPGIST")
  public static let sql: SQLToken = Keyword(rawValue: "SQL")
  public static let sqlcode: SQLToken = Keyword(rawValue: "SQLCODE")
  public static let sqlerror: SQLToken = Keyword(rawValue: "SQLERROR")
  public static let sqlexception: SQLToken = Keyword(rawValue: "SQLEXCEPTION")
  public static let sqlstate: SQLToken = Keyword(rawValue: "SQLSTATE")
  public static let sqlwarning: SQLToken = Keyword(rawValue: "SQLWARNING")
  public static let sqrt: SQLToken = Keyword(rawValue: "SQRT")
  public static let stable: SQLToken = Keyword(rawValue: "STABLE")
  public static let standalone: SQLToken = Keyword(rawValue: "STANDALONE")
  public static let start: SQLToken = Keyword(rawValue: "START")
  public static let state: SQLToken = Keyword(rawValue: "STATE")
  public static let statement: SQLToken = Keyword(rawValue: "STATEMENT")
  public static let `static`: SQLToken = Keyword(rawValue: "STATIC")
  public static let statistics: SQLToken = Keyword(rawValue: "STATISTICS")
  public static let stddevPop: SQLToken = Keyword(rawValue: "STDDEV_POP")
  public static let stddevSamp: SQLToken = Keyword(rawValue: "STDDEV_SAMP")
  public static let stdin: SQLToken = Keyword(rawValue: "STDIN")
  public static let stdout: SQLToken = Keyword(rawValue: "STDOUT")
  public static let storage: SQLToken = Keyword(rawValue: "STORAGE")
  public static let stored: SQLToken = Keyword(rawValue: "STORED")
  public static let strict: SQLToken = Keyword(rawValue: "STRICT")
  public static let string: SQLToken = Keyword(rawValue: "STRING")
  public static let stringAgg: SQLToken = Keyword(rawValue: "STRING_AGG")
  public static let strip: SQLToken = Keyword(rawValue: "STRIP")
  public static let structure: SQLToken = Keyword(rawValue: "STRUCTURE")
  public static let style: SQLToken = Keyword(rawValue: "STYLE")
  public static let subclassOrigin: SQLToken = Keyword(rawValue: "SUBCLASS_ORIGIN")
  public static let submultiset: SQLToken = Keyword(rawValue: "SUBMULTISET")
  public static let subscription: SQLToken = Keyword(rawValue: "SUBSCRIPTION")
  public static let subset: SQLToken = Keyword(rawValue: "SUBSET")
  public static let substring: SQLToken = Keyword(rawValue: "SUBSTRING")
  public static let substringRegex: SQLToken = Keyword(rawValue: "SUBSTRING_REGEX")
  public static let succeeds: SQLToken = Keyword(rawValue: "SUCCEEDS")
  public static let sum: SQLToken = Keyword(rawValue: "SUM")
  public static let support: SQLToken = Keyword(rawValue: "SUPPORT")
  public static let symmetric: SQLToken = Keyword(rawValue: "SYMMETRIC")
  public static let sysid: SQLToken = Keyword(rawValue: "SYSID")
  public static let system: SQLToken = Keyword(rawValue: "SYSTEM")
  public static let systemTime: SQLToken = Keyword(rawValue: "SYSTEM_TIME")
  public static let systemUser: SQLToken = Keyword(rawValue: "SYSTEM_USER")
  public static let t: SQLToken = Keyword(rawValue: "T")
  public static let table: SQLToken = Keyword(rawValue: "TABLE")
  public static let tables: SQLToken = Keyword(rawValue: "TABLES")
  public static let tablesample: SQLToken = Keyword(rawValue: "TABLESAMPLE")
  public static let tablespace: SQLToken = Keyword(rawValue: "TABLESPACE")
  public static let tableName: SQLToken = Keyword(rawValue: "TABLE_NAME")
  public static let tan: SQLToken = Keyword(rawValue: "TAN")
  public static let tanh: SQLToken = Keyword(rawValue: "TANH")
  public static let temp: SQLToken = Keyword(rawValue: "TEMP")
  public static let template: SQLToken = Keyword(rawValue: "TEMPLATE")
  public static let temporary: SQLToken = Keyword(rawValue: "TEMPORARY")
  public static let text: SQLToken = Keyword(rawValue: "TEXT")
  public static let then: SQLToken = Keyword(rawValue: "THEN")
  public static let through: SQLToken = Keyword(rawValue: "THROUGH")
  public static let ties: SQLToken = Keyword(rawValue: "TIES")
  public static let time: SQLToken = Keyword(rawValue: "TIME")
  public static let timestamp: SQLToken = Keyword(rawValue: "TIMESTAMP")
  public static let timezoneHour: SQLToken = Keyword(rawValue: "TIMEZONE_HOUR")
  public static let timezoneMinute: SQLToken = Keyword(rawValue: "TIMEZONE_MINUTE")
  public static let to: SQLToken = Keyword(rawValue: "TO")
  public static let token: SQLToken = Keyword(rawValue: "TOKEN")
  public static let topLevelCount: SQLToken = Keyword(rawValue: "TOP_LEVEL_COUNT")
  public static let trailing: SQLToken = Keyword(rawValue: "TRAILING")
  public static let transaction: SQLToken = Keyword(rawValue: "TRANSACTION")
  public static let transactionsCommitted: SQLToken = Keyword(rawValue: "TRANSACTIONS_COMMITTED")
  public static let transactionsRolledBack: SQLToken = Keyword(rawValue: "TRANSACTIONS_ROLLED_BACK")
  public static let transactionActive: SQLToken = Keyword(rawValue: "TRANSACTION_ACTIVE")
  public static let transform: SQLToken = Keyword(rawValue: "TRANSFORM")
  public static let transforms: SQLToken = Keyword(rawValue: "TRANSFORMS")
  public static let translate: SQLToken = Keyword(rawValue: "TRANSLATE")
  public static let translateRegex: SQLToken = Keyword(rawValue: "TRANSLATE_REGEX")
  public static let translation: SQLToken = Keyword(rawValue: "TRANSLATION")
  public static let treat: SQLToken = Keyword(rawValue: "TREAT")
  public static let trigger: SQLToken = Keyword(rawValue: "TRIGGER")
  public static let triggerCatalog: SQLToken = Keyword(rawValue: "TRIGGER_CATALOG")
  public static let triggerName: SQLToken = Keyword(rawValue: "TRIGGER_NAME")
  public static let triggerSchema: SQLToken = Keyword(rawValue: "TRIGGER_SCHEMA")
  public static let trim: SQLToken = Keyword(rawValue: "TRIM")
  public static let trimArray: SQLToken = Keyword(rawValue: "TRIM_ARRAY")
  public static let `true`: SQLToken = Keyword(rawValue: "TRUE")
  public static let truncate: SQLToken = Keyword(rawValue: "TRUNCATE")
  public static let trusted: SQLToken = Keyword(rawValue: "TRUSTED")
  public static let tsquery: SQLToken = Keyword(rawValue: "TSQUERY")
  public static let tsvector: SQLToken = Keyword(rawValue: "TSVECTOR")
  public static let type: SQLToken = Keyword(rawValue: "TYPE")
  public static let types: SQLToken = Keyword(rawValue: "TYPES")
  public static let uescape: SQLToken = Keyword(rawValue: "UESCAPE")
  public static let unbounded: SQLToken = Keyword(rawValue: "UNBOUNDED")
  public static let uncommitted: SQLToken = Keyword(rawValue: "UNCOMMITTED")
  public static let unconditional: SQLToken = Keyword(rawValue: "UNCONDITIONAL")
  public static let under: SQLToken = Keyword(rawValue: "UNDER")
  public static let unencrypted: SQLToken = Keyword(rawValue: "UNENCRYPTED")
  public static let union: SQLToken = Keyword(rawValue: "UNION")
  public static let unique: SQLToken = Keyword(rawValue: "UNIQUE")
  public static let unknown: SQLToken = Keyword(rawValue: "UNKNOWN")
  public static let unlink: SQLToken = Keyword(rawValue: "UNLINK")
  public static let unlisten: SQLToken = Keyword(rawValue: "UNLISTEN")
  public static let unlogged: SQLToken = Keyword(rawValue: "UNLOGGED")
  public static let unmatched: SQLToken = Keyword(rawValue: "UNMATCHED")
  public static let unnamed: SQLToken = Keyword(rawValue: "UNNAMED")
  public static let unnest: SQLToken = Keyword(rawValue: "UNNEST")
  public static let until: SQLToken = Keyword(rawValue: "UNTIL")
  public static let untyped: SQLToken = Keyword(rawValue: "UNTYPED")
  public static let update: SQLToken = Keyword(rawValue: "UPDATE")
  public static let upper: SQLToken = Keyword(rawValue: "UPPER")
  public static let uri: SQLToken = Keyword(rawValue: "URI")
  public static let usage: SQLToken = Keyword(rawValue: "USAGE")
  public static let user: SQLToken = Keyword(rawValue: "USER")
  public static let userDefinedTypeCatalog: SQLToken = Keyword(rawValue: "USER_DEFINED_TYPE_CATALOG")
  public static let userDefinedTypeCode: SQLToken = Keyword(rawValue: "USER_DEFINED_TYPE_CODE")
  public static let userDefinedTypeName: SQLToken = Keyword(rawValue: "USER_DEFINED_TYPE_NAME")
  public static let userDefinedTypeSchema: SQLToken = Keyword(rawValue: "USER_DEFINED_TYPE_SCHEMA")
  public static let using: SQLToken = Keyword(rawValue: "USING")
  public static let utf16: SQLToken = Keyword(rawValue: "UTF16")
  public static let utf32: SQLToken = Keyword(rawValue: "UTF32")
  public static let utf8: SQLToken = Keyword(rawValue: "UTF8")
  public static let uuid: SQLToken = Keyword(rawValue: "UUID")
  public static let vacuum: SQLToken = Keyword(rawValue: "VACUUM")
  public static let valid: SQLToken = Keyword(rawValue: "VALID")
  public static let validate: SQLToken = Keyword(rawValue: "VALIDATE")
  public static let validator: SQLToken = Keyword(rawValue: "VALIDATOR")
  public static let value: SQLToken = Keyword(rawValue: "VALUE")
  public static let values: SQLToken = Keyword(rawValue: "VALUES")
  public static let valueOf: SQLToken = Keyword(rawValue: "VALUE_OF")
  public static let varbinary: SQLToken = Keyword(rawValue: "VARBINARY")
  public static let varchar: SQLToken = Keyword(rawValue: "VARCHAR")
  public static let variadic: SQLToken = Keyword(rawValue: "VARIADIC")
  public static let varying: SQLToken = Keyword(rawValue: "VARYING")
  public static let varPop: SQLToken = Keyword(rawValue: "VAR_POP")
  public static let varSamp: SQLToken = Keyword(rawValue: "VAR_SAMP")
  public static let verbose: SQLToken = Keyword(rawValue: "VERBOSE")
  public static let version: SQLToken = Keyword(rawValue: "VERSION")
  public static let versioning: SQLToken = Keyword(rawValue: "VERSIONING")
  public static let view: SQLToken = Keyword(rawValue: "VIEW")
  public static let views: SQLToken = Keyword(rawValue: "VIEWS")
  public static let volatile: SQLToken = Keyword(rawValue: "VOLATILE")
  public static let when: SQLToken = Keyword(rawValue: "WHEN")
  public static let whenever: SQLToken = Keyword(rawValue: "WHENEVER")
  public static let `where`: SQLToken = Keyword(rawValue: "WHERE")
  public static let whitespace: SQLToken = Keyword(rawValue: "WHITESPACE")
  public static let widthBucket: SQLToken = Keyword(rawValue: "WIDTH_BUCKET")
  public static let window: SQLToken = Keyword(rawValue: "WINDOW")
  public static let with: SQLToken = Keyword(rawValue: "WITH")
  public static let within: SQLToken = Keyword(rawValue: "WITHIN")
  public static let without: SQLToken = Keyword(rawValue: "WITHOUT")
  public static let work: SQLToken = Keyword(rawValue: "WORK")
  public static let wrapper: SQLToken = Keyword(rawValue: "WRAPPER")
  public static let write: SQLToken = Keyword(rawValue: "WRITE")
  public static let xml: SQLToken = Keyword(rawValue: "XML")
  public static let xmlagg: SQLToken = Keyword(rawValue: "XMLAGG")
  public static let xmlattributes: SQLToken = Keyword(rawValue: "XMLATTRIBUTES")
  public static let xmlbinary: SQLToken = Keyword(rawValue: "XMLBINARY")
  public static let xmlcast: SQLToken = Keyword(rawValue: "XMLCAST")
  public static let xmlcomment: SQLToken = Keyword(rawValue: "XMLCOMMENT")
  public static let xmlconcat: SQLToken = Keyword(rawValue: "XMLCONCAT")
  public static let xmldeclaration: SQLToken = Keyword(rawValue: "XMLDECLARATION")
  public static let xmldocument: SQLToken = Keyword(rawValue: "XMLDOCUMENT")
  public static let xmlelement: SQLToken = Keyword(rawValue: "XMLELEMENT")
  public static let xmlexists: SQLToken = Keyword(rawValue: "XMLEXISTS")
  public static let xmlforest: SQLToken = Keyword(rawValue: "XMLFOREST")
  public static let xmliterate: SQLToken = Keyword(rawValue: "XMLITERATE")
  public static let xmlnamespaces: SQLToken = Keyword(rawValue: "XMLNAMESPACES")
  public static let xmlparse: SQLToken = Keyword(rawValue: "XMLPARSE")
  public static let xmlpi: SQLToken = Keyword(rawValue: "XMLPI")
  public static let xmlquery: SQLToken = Keyword(rawValue: "XMLQUERY")
  public static let xmlroot: SQLToken = Keyword(rawValue: "XMLROOT")
  public static let xmlschema: SQLToken = Keyword(rawValue: "XMLSCHEMA")
  public static let xmlserialize: SQLToken = Keyword(rawValue: "XMLSERIALIZE")
  public static let xmltable: SQLToken = Keyword(rawValue: "XMLTABLE")
  public static let xmltext: SQLToken = Keyword(rawValue: "XMLTEXT")
  public static let xmlvalidate: SQLToken = Keyword(rawValue: "XMLVALIDATE")
  public static let year: SQLToken = Keyword(rawValue: "YEAR")
  public static let yes: SQLToken = Keyword(rawValue: "YES")
  public static let zone: SQLToken = Keyword(rawValue: "ZONE")
}
